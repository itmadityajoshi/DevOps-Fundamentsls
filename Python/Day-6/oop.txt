Oop is a way of programming that focuses on creating "objects".
An Object is like a self-contained unit that bundles together"

    1. Data (Attributes): Infromation about the object. For a Car, this might be its color, model and speed.
    2. Actions (Methods) : Things the object can do. A car can accelerate, brake, and turn.


Why Bother with OOP?

OOP offers several advantages:
    . Orgnaization: Your code becomes more structutred and easier to navigate.
    . Resuability : You can use the sam object "blueprints" (classes) multiples times, saving you from writing the sam code over and over.
    . Easier Debugging : When something goes wrong., it's often easier to pinpoint the problem within a specific, self-contained object.
    . Rea-world Modeling : OOP allows you to represent real-world things and their relationship in a natural way.


The Four pillars of OOP

1. Abstraction: Abstraction means hiding complex details and showing only the essentail information to the user.
2. Encapsulation: It bundles data(attributes) and the methods that operate on that data within a class. This protect data being misused or changed from outside the object. It also control access.
3. Inheritance: It transfer the properties from parents to child class. This promotes code reuse and reduce code redundancy.
4. Polymorphism: "poly" means many, and "morph" means forms. This means objects of different classes can respond to the same "message" ( method call) in their own specifc way.
                For e.g: Both  a "Dog" and "Cat" might have a make_sound() method. 
                         The Dog will bark, and the cat will meow - same method name, different behavioiur.


2. Classes and objects: The blueprint and building

    . Class: Think of a class as a blueprint or a template. 
             it defines what an object will be like- what data it would hold and what actions it can perform.
             It does not create an object itself, just the instruction for creating.

    . Object(instance): An object is a specific instances created from the class.
            if "car" is the class, then your black BMW is an object (an instances) for the "Car" class.
            Each object has its own unique set of data.


    . Class vs. instance (Attributes):
        . Class Attributes: These are shared by all objects of the class.
        . Instance Attributes: These are specific to each individual object. 
                                name and breed are instances attributes. Each dog has its own name and breed.
                                They are usually defined within __init__ method.

3. The constructor": setting thing up (__init__)

    The __init__ method is special. It's called the constructor. It is automatically run whenever you create a new object form a class.

    What is it used for?
   -> The constructor job is to initilalize the object's attributes - to give them their starting value. 
      It sets up the initial state of the object.

            classDog:
                def__init__(self, name, breed): # The constructor
                        self.name = name      # Setting the name attribute
                        self.breed = breed    # Setting the breed attribute
                When we do this:
                my_dog = Dog("Fido","Poodle") # The __init__ method is automatically called
                It's like we're saying:
                1. Create a new Dog object.
                2. Run the __init__ method on this new object:
                    - Set my_dog.name to "Fido"
                    - Set my_dog.breed to "Poodle"

        you can also set default values for parameters in the constructor, making them optional when creating an object.
             classDog:
                def__init__(self, name="Unknown", breed="Mixed"):
                        self.name = name
                        self.breed = breed
                dog1 = Dog() # name will be "Unknown", breed will be "Mixed"
                dog2 = Dog("Rex") # name will be "Rex", breed will be "Mixed"
                dog3 = Dog("Bella","Labrador")# name will be "Bella", breed will be Labrador